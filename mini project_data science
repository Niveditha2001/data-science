{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Image Classification.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNqavfNy6Ftqe0WO1IU/yt9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Niveditha2001/data-science/blob/main/mini%20project_data%20science\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QJcPblWK_W2u",
        "outputId": "058bbf71-7a96-43b8-f7ba-4d008bc904ec"
      },
      "source": [
        "!pip install ipython-autotime\n",
        "%load_ext autotime"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting ipython-autotime\n",
            "  Downloading https://files.pythonhosted.org/packages/b4/c9/b413a24f759641bc27ef98c144b590023c8038dfb8a3f09e713e9dff12c1/ipython_autotime-0.3.1-py2.py3-none-any.whl\n",
            "Requirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (from ipython-autotime) (5.5.0)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (0.7.5)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (4.4.2)\n",
            "Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (1.0.18)\n",
            "Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (0.8.1)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (5.0.5)\n",
            "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (4.8.0)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (2.6.1)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (56.0.0)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->ipython-autotime) (1.15.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->ipython-autotime) (0.2.5)\n",
            "Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.7/dist-packages (from traitlets>=4.2->ipython->ipython-autotime) (0.2.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect; sys_platform != \"win32\"->ipython->ipython-autotime) (0.7.0)\n",
            "Installing collected packages: ipython-autotime\n",
            "Successfully installed ipython-autotime-0.3.1\n",
            "time: 204 Âµs (started: 2021-04-29 18:58:19 +00:00)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zg5fHbPN2kyr"
      },
      "source": [
        "# Data : Images \n",
        "# 1. Download manually the images from the google\n",
        "# 2. Download dataset from Kaggle.com\n",
        "# 3. Build a image web crawler\n",
        "# 4. use python libraries to scrape the images (using)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J0k2a4u141sg",
        "outputId": "f2c7ef9b-6aae-4544-9c16-effb6ae3043d"
      },
      "source": [
        "!pip install bing-image-downloader"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting bing-image-downloader\n",
            "  Downloading https://files.pythonhosted.org/packages/0d/bf/537a61030b84ae4cd5022d5c7b014fd9bc3ce7c02358919153a6658a61d3/bing_image_downloader-1.0.4-py3-none-any.whl\n",
            "Installing collected packages: bing-image-downloader\n",
            "Successfully installed bing-image-downloader-1.0.4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T15PJYMk5hJX"
      },
      "source": [
        "!mkdir images"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IbTwFSp95uxf",
        "outputId": "b5e92b06-0470-4e54-a40d-f21994bd2d86"
      },
      "source": [
        "from bing_image_downloader import downloader\n",
        "downloader.download(\"ice creams\",limit=25,output_dir='images',\n",
        "                    adult_filter_off=True)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "[!!]Indexing page: 1\n",
            "\n",
            "[%] Indexed 12 Images on Page 1.\n",
            "\n",
            "===============================================\n",
            "\n",
            "[%] Downloading Image #1 from http://4.bp.blogspot.com/_MHtRnLjgdiI/TNGQwyNbfOI/AAAAAAAAACo/WkyX4DSIin4/s1600/ice-cream+(1).jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #2 from https://www.socialgoat.in/PR1670/public/styles/4_col_gutter_portrait/public/2020-03/Bbaileys.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #3 from https://www.greetingsisland.com/images/Cards/birthday/Birthday-icecreams.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #4 from https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #4 from http://flashbak.com/wp-content/uploads/2014/09/romero.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #5 from http://vertassets.blob.core.windows.net/image/edc9929a/edc9929a-5a91-441b-a562-15b795d91df7/hoyer-rollo.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #6 from http://clothspot.co.uk/wp-content/uploads/2014/08/Soft-aqua-cotton-lawn-fabric.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #7 from http://wallpapersdsc.net/wp-content/uploads/2015/11/Ice_Cream_pic16.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #8 from https://www.seriouseats.com/images/2012/11/20120712-214287-blue-moon-ice-cream.jpeg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #9 from https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #9 from https://jenis.com/wp-content/uploads/2015/03/MG_1210_CHICAGO_WICKER_PARK-e1426951408864.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #10 from https://cdn.homedit.com/wp-content/uploads/2015/07/Tiffany-blue-paint-color-in-bathroom.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "\n",
            "\n",
            "[!!]Indexing page: 2\n",
            "\n",
            "[%] Indexed 12 Images on Page 2.\n",
            "\n",
            "===============================================\n",
            "\n",
            "[%] Downloading Image #11 from http://4.bp.blogspot.com/_MHtRnLjgdiI/TNGQwyNbfOI/AAAAAAAAACo/WkyX4DSIin4/s1600/ice-cream+(1).jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #12 from https://www.socialgoat.in/PR1670/public/styles/4_col_gutter_portrait/public/2020-03/Bbaileys.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #13 from https://www.greetingsisland.com/images/Cards/birthday/Birthday-icecreams.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #14 from https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #14 from http://flashbak.com/wp-content/uploads/2014/09/romero.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #15 from http://vertassets.blob.core.windows.net/image/edc9929a/edc9929a-5a91-441b-a562-15b795d91df7/hoyer-rollo.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #16 from http://clothspot.co.uk/wp-content/uploads/2014/08/Soft-aqua-cotton-lawn-fabric.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #17 from http://wallpapersdsc.net/wp-content/uploads/2015/11/Ice_Cream_pic16.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #18 from https://www.seriouseats.com/images/2012/11/20120712-214287-blue-moon-ice-cream.jpeg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #19 from https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #19 from https://jenis.com/wp-content/uploads/2015/03/MG_1210_CHICAGO_WICKER_PARK-e1426951408864.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #20 from https://cdn.homedit.com/wp-content/uploads/2015/07/Tiffany-blue-paint-color-in-bathroom.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "\n",
            "\n",
            "[!!]Indexing page: 3\n",
            "\n",
            "[%] Indexed 11 Images on Page 3.\n",
            "\n",
            "===============================================\n",
            "\n",
            "[%] Downloading Image #21 from https://www.greetingsisland.com/images/Cards/birthday/Birthday-icecreams.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #22 from https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/87468/original/7a31ab451a29627555d88e8de4a8f6ef.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #22 from http://flashbak.com/wp-content/uploads/2014/09/romero.png\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #23 from https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Issue getting: https://images.chickadvisor.com/item/55836/original/acc451121af24a3ba0d0d80b7ee9801a.jpg\n",
            "[!] Error:: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>\n",
            "[%] Downloading Image #23 from https://cdn.homedit.com/wp-content/uploads/2015/07/Tiffany-blue-paint-color-in-bathroom.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #24 from http://wallpapersdsc.net/wp-content/uploads/2015/11/Ice_Cream_pic16.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "[%] Downloading Image #25 from https://jenis.com/wp-content/uploads/2015/03/MG_1210_CHICAGO_WICKER_PARK-e1426951408864.jpg\n",
            "[%] File Downloaded !\n",
            "\n",
            "\n",
            "\n",
            "[%] Done. Downloaded 25 images.\n",
            "\n",
            "===============================================\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQo3cMDmAICz"
      },
      "source": [
        "# preprocessing\n",
        "# 1. Resize\n",
        "# 2. Flatten\n",
        "\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from skimage.io import imread\n",
        "from skimage.transform import resize\n",
        "\n",
        "target = []\n",
        "images = []\n",
        "flat_data = []\n",
        "\n",
        "DATADIR = '/content/images'\n",
        "CATEGORIES =['fruits','ice creams','bikes']\n",
        "\n",
        "for category in CATEGORIES:\n",
        "  class_num = CATEGORIES.index(category) # Label Encoding the values\n",
        "  path = os.path.join(DATADIR,category) # Create path to use all the images\n",
        "  for img in os.listdir(path):\n",
        "    img_array = imread(os.path.join(path,img))\n",
        "    #print(img_array.shape)\n",
        "    #plt.imshow(img_array)\n",
        "    img_resized = resize(img_array,(150,150,3))# Normalizes the value from 0 to 1\n",
        "    flat_data.append(img_resized.flatten())\n",
        "    images.append(img_resized)\n",
        "    target.append(class_num)\n",
        "\n",
        "flat_data = np.array(flat_data)\n",
        "target = np.array(target)\n",
        "images = np.array(images)\n",
        "    \n",
        "\n"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ln1qRTViL3n2",
        "outputId": "6d699c34-7579-4244-ff13-17618f86ee1d"
      },
      "source": [
        "flat_data[0]"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.24705882, 0.21568627, 0.14117647, ..., 0.40392157, 0.35686275,\n",
              "       0.30930719])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3kaKtQbhMSAc",
        "outputId": "d4e04ceb-2883-47ff-c34e-43972ce9fd4a"
      },
      "source": [
        "target"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "       2, 2, 2, 2, 2, 2, 2, 2, 2])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "hz2XH2JxMkC5",
        "outputId": "abfdac7f-b71d-4ade-93c1-b8968277281e"
      },
      "source": [
        "uique,count = np.unique(target,return_counts=True)\n",
        "plt.bar(CATEGORIES,count)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 3 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ivpqrn_6ODKM",
        "outputId": "5bb5c2cc-c38f-44ca-a20f-09e8133c2a02"
      },
      "source": [
        "!pip install sklearn "
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (0.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn) (0.22.2.post1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.0.1)\n",
            "Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn) (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QYu-cPM7NBOD"
      },
      "source": [
        "# split the data into Traning and testing\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(flat_data,target,\n",
        "                                                 test_size=0.4,random_state=109)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vp6pCADvPTjy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e2df147-c75a-430f-9cc9-e363e8cffb36"
      },
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn import svm \n",
        "param_grid = [\n",
        "               {'C':[1,10,100,1000],'kernel':['linear']},\n",
        "               {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},\n",
        "]\n",
        "svc = svm.SVC(probability=True)\n",
        "clf = GridSearchCV(svc,param_grid)\n",
        "clf.fit(x_train,y_train)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=None, error_score=nan,\n",
              "             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n",
              "                           class_weight=None, coef0=0.0,\n",
              "                           decision_function_shape='ovr', degree=3,\n",
              "                           gamma='scale', kernel='rbf', max_iter=-1,\n",
              "                           probability=True, random_state=None, shrinking=True,\n",
              "                           tol=0.001, verbose=False),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid=[{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n",
              "                         {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001],\n",
              "                          'kernel': ['rbf']}],\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-vlLPnFhsUZz",
        "outputId": "2f030a73-1a6c-4a3d-dd99-ed3eb83aea9e"
      },
      "source": [
        "y_pred = clf.predict(x_test)\n",
        "y_pred"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0,\n",
              "       0, 0, 2, 1, 1, 0, 1, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r6EvedI2uo4f",
        "outputId": "ab444cb0-df36-4252-96e5-785d81089e6d"
      },
      "source": [
        "y_test"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 0, 1, 0, 0,\n",
              "       0, 1, 2, 1, 1, 1, 1, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9eJWWHW8usTf"
      },
      "source": [
        "from sklearn.metrics import accuracy_score,confusion_matrix"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1oVEb3rou4l9",
        "outputId": "f7cede1e-0495-49cc-c61c-d04772bebd05"
      },
      "source": [
        "accuracy_score(y_pred,y_test)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7666666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VXBRpv_MvB0X",
        "outputId": "33168ec7-ee64-48da-d089-36188d6f5568"
      },
      "source": [
        "confusion_matrix(y_pred,y_test)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[9, 5, 2],\n",
              "       [0, 9, 0],\n",
              "       [0, 0, 5]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ig7-E9gqvK1n"
      },
      "source": [
        "# save the model using pickle library\n",
        "import pickle\n",
        "pickle.dump(clf,open('img_model.p','wb'))"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aHAhFu6KvjtP"
      },
      "source": [
        "model = pickle.load(open('img_model.p','rb'))"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "GHtaI9ymv7kO",
        "outputId": "c98670e1-8f3c-4ca0-ba99-c480d695745f"
      },
      "source": [
        "# testing a brand new image\n",
        "flat_data = []\n",
        "url = input('Enter your URL')\n",
        "img = imread(url)\n",
        "img_resized = resize(img,(150,150,3))\n",
        "flat_data.append(img_resized.flatten())\n",
        "flat_data = np.array(flat_data)\n",
        "print(img.shape)\n",
        "plt.imshow(img_resized)\n",
        "y_out = model.predict(flat_data)\n",
        "y_out = CATEGORIES[y_out[0]]\n",
        "print(f'PREDICTED OUTPUT :{y_out}')"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter your URLhttps://images-na.ssl-images-amazon.com/images/I/51eB6A+NrwL._SX325_BO1,204,203,200_.jpg\n",
            "(499, 327, 3)\n",
            "PREDICTED OUTPUT :fruits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tKPT-cI2xK6y",
        "outputId": "eb3a12d0-57c6-4eb0-cc19-251f26a569ab"
      },
      "source": [
        "!pip install streamlit\n",
        "\n",
        "!pip install pyngrok\n",
        "from pyngrok import ngrok"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting streamlit\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b7/98/4725661dc5719c05ba7e3f9744407ce91e2d982cb6c9601de2bbb62e2dd0/streamlit-0.81.0-py2.py3-none-any.whl (8.2MB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 8.2MB 4.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: cachetools>=4.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.2.1)\n",
            "Collecting watchdog; platform_system != \"Darwin\"\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d2/b2/b4ebe23174fd00ec94ac3f58ebf85f1090c49858feab1ca62ed7ea4d2f2f/watchdog-2.0.3-py3-none-manylinux2014_x86_64.whl (74kB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 81kB 8.2MB/s \n",
            "\u001b[?25hRequirement already satisfied: pandas>=0.21.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.1.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (7.1.2)\n",
            "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (7.1.2)\n",
            "Collecting base58\n",
            "  Downloading https://files.pythonhosted.org/packages/b8/a1/d9f565e9910c09fd325dc638765e8843a19fa696275c16cc08cf3b0a3c25/base58-2.1.0-py3-none-any.whl\n",
            "Collecting pydeck>=0.1.dev5\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d6/bc/f0e44828e4290367c869591d50d3671a4d0ee94926da6cb734b7b200308c/pydeck-0.6.2-py2.py3-none-any.whl (4.2MB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 4.2MB 44.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: protobuf!=3.11,>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (3.12.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from streamlit) (2.23.0)\n",
            "Requirement already satisfied: altair>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.1.0)\n",
            "Collecting gitpython\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a6/99/98019716955ba243657daedd1de8f3a88ca1f5b75057c38e959db22fb87b/GitPython-3.1.14-py3-none-any.whl (159kB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 163kB 55.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: tornado>=5.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (5.1.1)\n",
            "Requirement already satisfied: pyarrow; python_version < \"3.9\" in /usr/local/lib/python3.7/dist-packages (from streamlit) (3.0.0)\n",
            "Requirement already satisfied: tzlocal in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.5.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.19.5)\n",
            "Requirement already satisfied: astor in /usr/local/lib/python3.7/dist-packages (from streamlit) (0.8.1)\n",
            "Collecting validators\n",
            "  Downloading https://files.pythonhosted.org/packages/db/2f/7fed3ee94ad665ad2c1de87f858f10a7785251ff75b4fd47987888d07ef1/validators-0.18.2-py3-none-any.whl\n",
            "Collecting blinker\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1b/51/e2a9f3b757eb802f61dc1f2b09c8c99f6eb01cf06416c0671253536517b6/blinker-1.4.tar.gz (111kB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 112kB 52.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from streamlit) (2.8.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from streamlit) (20.9)\n",
            "Requirement already satisfied: toml in /usr/local/lib/python3.7/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.0->streamlit) (2018.9)\n",
            "Requirement already satisfied: ipywidgets>=7.0.0 in /usr/local/lib/python3.7/dist-packages (from pydeck>=0.1.dev5->streamlit) (7.6.3)\n",
            "Collecting ipykernel>=5.1.2; python_version >= \"3.4\"\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3a/7d/9f8ac1b1b76f2f1538b5650f0b5636bae082724b1e06939a3a9d38e1380e/ipykernel-5.5.3-py3-none-any.whl (120kB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 122kB 45.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: jinja2>=2.10.1 in /usr/local/lib/python3.7/dist-packages (from pydeck>=0.1.dev5->streamlit) (2.11.3)\n",
            "Requirement already satisfied: traitlets>=4.3.2 in /usr/local/lib/python3.7/dist-packages (from pydeck>=0.1.dev5->streamlit) (5.0.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf!=3.11,>=3.6.0->streamlit) (56.0.0)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf!=3.11,>=3.6.0->streamlit) (1.15.0)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (1.24.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (2020.12.5)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (3.0.4)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (0.3)\n",
            "Requirement already satisfied: jsonschema in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (2.6.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (0.11.1)\n",
            "Collecting gitdb<5,>=4.0.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ea/e8/f414d1a4f0bbc668ed441f74f44c116d9816833a48bf81d22b697090dba8/gitdb-4.0.7-py3-none-any.whl (63kB)\n",
            "\u001b[K     |ââââââââââââââââââââââââââââââââ| 71kB 7.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: decorator>=3.4.0 in /usr/local/lib/python3.7/dist-packages (from validators->streamlit) (4.4.2)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->streamlit) (2.4.7)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.1.3)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0; python_version >= \"3.6\" in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.0.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.5.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (3.5.1)\n",
            "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.5.0)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2; python_version >= \"3.4\"->pydeck>=0.1.dev5->streamlit) (5.3.5)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2>=2.10.1->pydeck>=0.1.dev5->streamlit) (1.1.1)\n",
            "Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.7/dist-packages (from traitlets>=4.3.2->pydeck>=0.1.dev5->streamlit) (0.2.0)\n",
            "Collecting smmap<5,>=3.0.1\n",
            "  Downloading https://files.pythonhosted.org/packages/68/ee/d540eb5e5996eb81c26ceffac6ee49041d473bc5125f2aa995cf51ec1cf1/smmap-4.0.0-py2.py3-none-any.whl\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.7/dist-packages (from nbformat>=4.2.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (4.7.1)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.7/dist-packages (from widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.3.1)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.7.5)\n",
            "Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.8.1)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (2.6.1)\n",
            "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /usr/local/lib/python3.7/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (4.8.0)\n",
            "Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.0.18)\n",
            "Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.7/dist-packages (from jupyter-client->ipykernel>=5.1.2; python_version >= \"3.4\"->pydeck>=0.1.dev5->streamlit) (22.0.3)\n",
            "Requirement already satisfied: Send2Trash in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.5.0)\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.6.1)\n",
            "Requirement already satisfied: terminado>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.9.4)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect; sys_platform != \"win32\"->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.2.5)\n",
            "Requirement already satisfied: testpath in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.4.4)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.8.4)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (3.3.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.7.1)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.4.3)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.5.1)\n",
            "Building wheels for collected packages: blinker\n",
            "  Building wheel for blinker (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for blinker: filename=blinker-1.4-cp37-none-any.whl size=13448 sha256=2c6772687578d586861bb07735792f9acba315face633877ad210ea4e97e8f1a\n",
            "  Stored in directory: /root/.cache/pip/wheels/92/a0/00/8690a57883956a301d91cf4ec999cc0b258b01e3f548f86e89\n",
            "Successfully built blinker\n",
            "\u001b[31mERROR: google-colab 1.0.0 has requirement ipykernel~=4.10, but you'll have ipykernel 5.5.3 which is incompatible.\u001b[0m\n",
            "Installing collected packages: watchdog, base58, ipykernel, pydeck, smmap, gitdb, gitpython, validators, blinker, streamlit\n",
            "  Found existing installation: ipykernel 4.10.1\n",
            "    Uninstalling ipykernel-4.10.1:\n",
            "      Successfully uninstalled ipykernel-4.10.1\n",
            "Successfully installed base58-2.1.0 blinker-1.4 gitdb-4.0.7 gitpython-3.1.14 ipykernel-5.5.3 pydeck-0.6.2 smmap-4.0.0 streamlit-0.81.0 validators-0.18.2 watchdog-2.0.3\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "ipykernel"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Collecting pyngrok\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6b/4e/a2fe095bbe17cf26424c4abcd22a0490e22d01cc628f25af5e220ddbf6f0/pyngrok-5.0.5.tar.gz (745kB)\n",
            "\r\u001b[K     |â                               | 10kB 15.0MB/s eta 0:00:01\r\u001b[K     |â                               | 20kB 10.7MB/s eta 0:00:01\r\u001b[K     |ââ                              | 30kB 11.8MB/s eta 0:00:01\r\u001b[K     |ââ                              | 40kB 9.5MB/s eta 0:00:01\r\u001b[K     |âââ                             | 51kB 5.1MB/s eta 0:00:01\r\u001b[K     |âââ                             | 61kB 5.8MB/s eta 0:00:01\r\u001b[K     |âââ                             | 71kB 5.8MB/s eta 0:00:01\r\u001b[K     |ââââ                            | 81kB 6.3MB/s eta 0:00:01\r\u001b[K     |ââââ                            | 92kB 6.1MB/s eta 0:00:01\r\u001b[K     |âââââ                           | 102kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââ                           | 112kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââ                          | 122kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââ                          | 133kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââ                         | 143kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââ                         | 153kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââ                         | 163kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââ                        | 174kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââ                        | 184kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââ                       | 194kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââ                       | 204kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââ                      | 215kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââ                      | 225kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââ                     | 235kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââ                     | 245kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââ                     | 256kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââ                    | 266kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââ                    | 276kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââ                   | 286kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââ                   | 296kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââ                  | 307kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââ                  | 317kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââ                  | 327kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââ                 | 337kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââ                 | 348kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââ                | 358kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââ                | 368kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââ               | 378kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââ               | 389kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââ              | 399kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââ              | 409kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââ              | 419kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââ             | 430kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââ             | 440kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââ            | 450kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââ            | 460kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââ           | 471kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââ           | 481kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââ           | 491kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââ          | 501kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââ          | 512kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââ         | 522kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââ         | 532kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââ        | 542kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââ        | 552kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââ       | 563kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââ       | 573kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââ       | 583kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââ      | 593kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââ      | 604kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââ     | 614kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââ     | 624kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââ    | 634kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââ    | 645kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââââ   | 655kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââââ   | 665kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââââ   | 675kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââââ  | 686kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââââ  | 696kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââââââ | 706kB 6.5MB/s eta 0:00:01\r\u001b[K     |âââââââââââââââââââââââââââââââ | 716kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââââââ| 727kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââââââ| 737kB 6.5MB/s eta 0:00:01\r\u001b[K     |ââââââââââââââââââââââââââââââââ| 747kB 6.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: PyYAML in /usr/local/lib/python3.7/dist-packages (from pyngrok) (3.13)\n",
            "Building wheels for collected packages: pyngrok\n",
            "  Building wheel for pyngrok (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyngrok: filename=pyngrok-5.0.5-cp37-none-any.whl size=19246 sha256=34c4d44ff906d1aa06e1fc2a6670565fb3412b9d3756e4405ac3d6abcc9b1206\n",
            "  Stored in directory: /root/.cache/pip/wheels/0c/13/64/5ebbcc22eaf53fdf5766b397c1fb17c83f5775fdccf0ea1b88\n",
            "Successfully built pyngrok\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-5.0.5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WCfRqUawCgDq"
      },
      "source": [
        "# deployment :\n",
        "# 1. webpage - HTML/ASS/JS - Flask/Dajango\n",
        "# 2. webapp - Streamlit/Dash\n",
        "# 3. mobile app - Kotlin/Java"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kdi3l1RrDHJE",
        "outputId": "3e2246c8-0c06-487b-b435-ab3f030da163"
      },
      "source": [
        "%%writefile app.py \n",
        "import streamlit as st\n",
        "st.title('Image Classifier')"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Overwriting app.py\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}